type EmojiStatus = 'component' | 'fully-qualified' | 'minimally-qualified' | 'unqualified';
declare const componentStatus: EmojiStatus;
/**
 * Callback for converting sequence to string
 */
type EmojiSequenceToStringCallback = (value: number[]) => string;
/**
 * Test data item
 */
interface EmojiTestDataItem {
    group: string;
    subgroup: string;
    code: string;
    sequence: number[];
    emoji: string;
    status: EmojiStatus;
    version: string;
    name: string;
}
/**
 * Get all emoji sequences from test file
 *
 * Returns all emojis as UTF-32 sequences
 */
declare function parseEmojiTestFile(data: string): EmojiTestDataItem[];
/**
 * Get qualified variations from parsed test file
 *
 * Key is unqualified emoji, value is longest fully qualified emoji
 */
declare function getQualifiedEmojiSequencesMap(sequences: number[][]): Map<number[], number[]>;
declare function getQualifiedEmojiSequencesMap(sequences: number[][], toString: (value: number[]) => string): Record<string, string>;
/**
 * Map data by sequence
 */
declare function mapEmojiTestDataBySequence(testData: EmojiTestDataItem[], convert: EmojiSequenceToStringCallback): Record<string, EmojiTestDataItem>;

export { EmojiSequenceToStringCallback, EmojiStatus, EmojiTestDataItem, componentStatus, getQualifiedEmojiSequencesMap, mapEmojiTestDataBySequence, parseEmojiTestFile };
