import { EmojiComponentType } from '../data.js';
import { EmojiTestDataComponentsMap } from './components.js';
import { EmojiTestDataItem } from './parse.js';

interface EmojiNameVariation {
    index: number;
    type: EmojiComponentType;
}
interface SplitEmojiName {
    base: string;
    key: string;
    variations?: (string | EmojiNameVariation)[];
    components?: number;
}
/**
 * Split emoji name to base name and variations
 *
 * Also finds indexes of each variation
 */
declare function splitEmojiNameVariations(name: string, sequence: number[], componentsData: EmojiTestDataComponentsMap): SplitEmojiName;
/**
 * Map item
 */
type EmojiComponentsMapItemSequence = (EmojiComponentType | number)[];
interface EmojiComponentsMapItem {
    name: string;
    sequence: EmojiComponentsMapItemSequence;
    children?: Record<EmojiComponentType, EmojiComponentsMapItem>;
}
/**
 * Get map of emoji components
 *
 * Result includes emoji sequences with largest number of characters (usually fully-qualified)
 * Only sequences with components are returned
 */
declare function getEmojiComponentsMap(testData: EmojiTestDataItem[], componentsMap?: EmojiTestDataComponentsMap): EmojiComponentsMapItem[];

export { EmojiComponentsMapItem, SplitEmojiName, getEmojiComponentsMap, splitEmojiNameVariations };
