'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const emoji_convert = require('./convert.cjs');
const emoji_data = require('./data.cjs');
const emoji_format = require('./format.cjs');

function getEmojiSequenceFromString(value) {
  return value.trim().split(/[^0-9A-F]+/i).filter((item) => item.length > 0).map(emoji_convert.getEmojiCodePoint);
}
function splitEmojiSequences(sequence) {
  const results = [];
  let queue = [];
  for (let i = 0; i < sequence.length; i++) {
    const code = sequence[i];
    if (code === emoji_data.joinerEmoji) {
      results.push(queue);
      queue = [];
    } else {
      queue.push(code);
    }
  }
  results.push(queue);
  return results;
}
function joinEmojiSequences(sequences) {
  let results = [];
  for (let i = 0; i < sequences.length; i++) {
    if (i > 0) {
      results.push(emoji_data.joinerEmoji);
    }
    results = results.concat(sequences[i]);
  }
  return results;
}
function removeEmojiVariations(sequence) {
  return sequence.filter((code) => code !== emoji_data.vs16Emoji);
}
function removeEmojiTones(sequence) {
  return sequence.filter((code) => {
    for (const key in emoji_data.emojiComponents) {
      const range = emoji_data.emojiComponents[key];
      if (code >= range[0] && code < range[1]) {
        return false;
      }
    }
    return true;
  });
}
function getUnqualifiedEmojiSequence(sequence) {
  return sequence.filter((num) => num !== emoji_data.vs16Emoji);
}
const mapOptions = {
  removeEmpty: true,
  removeDuplicates: false
};
function mapEmojiSequences(sequences, callback, options = {}) {
  const fullOptions = {
    ...mapOptions,
    ...options
  };
  const values = /* @__PURE__ */ new Set();
  const results = [];
  sequences.forEach((sequence) => {
    const result = callback(sequence);
    if (fullOptions.removeEmpty && !result.length) {
      return;
    }
    if (fullOptions.removeDuplicates) {
      const value = emoji_format.getEmojiSequenceString(result);
      if (values.has(value)) {
        return;
      }
      values.add(value);
    }
    results.push(result);
  });
  return results;
}

exports.getEmojiSequenceFromString = getEmojiSequenceFromString;
exports.getUnqualifiedEmojiSequence = getUnqualifiedEmojiSequence;
exports.joinEmojiSequences = joinEmojiSequences;
exports.mapEmojiSequences = mapEmojiSequences;
exports.removeEmojiTones = removeEmojiTones;
exports.removeEmojiVariations = removeEmojiVariations;
exports.splitEmojiSequences = splitEmojiSequences;
