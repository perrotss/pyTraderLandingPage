import { getEmojiCodePoint } from './convert.mjs';
import { joinerEmoji, vs16Emoji, emojiComponents } from './data.mjs';
import { getEmojiSequenceString } from './format.mjs';

function getEmojiSequenceFromString(value) {
  return value.trim().split(/[^0-9A-F]+/i).filter((item) => item.length > 0).map(getEmojiCodePoint);
}
function splitEmojiSequences(sequence) {
  const results = [];
  let queue = [];
  for (let i = 0; i < sequence.length; i++) {
    const code = sequence[i];
    if (code === joinerEmoji) {
      results.push(queue);
      queue = [];
    } else {
      queue.push(code);
    }
  }
  results.push(queue);
  return results;
}
function joinEmojiSequences(sequences) {
  let results = [];
  for (let i = 0; i < sequences.length; i++) {
    if (i > 0) {
      results.push(joinerEmoji);
    }
    results = results.concat(sequences[i]);
  }
  return results;
}
function removeEmojiVariations(sequence) {
  return sequence.filter((code) => code !== vs16Emoji);
}
function removeEmojiTones(sequence) {
  return sequence.filter((code) => {
    for (const key in emojiComponents) {
      const range = emojiComponents[key];
      if (code >= range[0] && code < range[1]) {
        return false;
      }
    }
    return true;
  });
}
function getUnqualifiedEmojiSequence(sequence) {
  return sequence.filter((num) => num !== vs16Emoji);
}
const mapOptions = {
  removeEmpty: true,
  removeDuplicates: false
};
function mapEmojiSequences(sequences, callback, options = {}) {
  const fullOptions = {
    ...mapOptions,
    ...options
  };
  const values = /* @__PURE__ */ new Set();
  const results = [];
  sequences.forEach((sequence) => {
    const result = callback(sequence);
    if (fullOptions.removeEmpty && !result.length) {
      return;
    }
    if (fullOptions.removeDuplicates) {
      const value = getEmojiSequenceString(result);
      if (values.has(value)) {
        return;
      }
      values.add(value);
    }
    results.push(result);
  });
  return results;
}

export { getEmojiSequenceFromString, getUnqualifiedEmojiSequence, joinEmojiSequences, mapEmojiSequences, removeEmojiTones, removeEmojiVariations, splitEmojiSequences };
